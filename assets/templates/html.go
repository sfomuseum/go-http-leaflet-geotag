// Code generated by go-bindata.
// sources:
// templates/html/camera.html
// templates/html/crosshair.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlCameraHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xeb\x8e\xdb\xb8\x15\xfe\x3f\x4f\x71\xa0\x45\x6a\x4f\xab\x91\x6c\xcf\xa5\x3b\x8a\x6d\x60\x37\xc8\x66\x53\x4c\x3a\x8b\x26\xe8\x8f\x06\xc1\x82\x16\x8f\x25\x36\x14\x49\x90\xd4\x78\x1c\xc3\xef\xd4\x67\xe8\x93\x15\xa4\x64\x89\xb2\x9d\xa4\x40\x8b\x04\x03\xf1\xf0\xe3\xb9\x7c\xe7\x42\xc2\xbb\x1d\x50\x5c\x33\x81\x10\xe5\xa4\x42\x4d\x22\xd8\xef\x2f\x76\x3b\x60\x22\xe7\x35\x45\x88\x98\xc8\x7f\x2f\x91\x50\xbf\x01\x00\x30\x37\x76\xcb\x71\xe9\xbf\x01\x56\x92\x6e\x61\xd7\x2e\x00\x94\x34\xcc\x32\x29\x32\x20\x2b\x23\x79\x6d\xf1\x65\xbf\x47\x28\x65\xa2\xc8\x60\xd2\xcb\x2a\xa2\x0b\x26\x06\xa2\x0d\xa3\xb6\xcc\x60\x3a\x99\xbc\xe8\x85\x25\xb2\xa2\xb4\x07\x69\x27\xa6\xcc\x28\x4e\xb6\x19\xac\x39\x3e\xf7\xe8\xb5\x14\xf6\xca\xb0\x2f\x98\xc1\xf4\x4e\x1d\x6f\xac\x49\xc5\xf8\x36\x83\x4a\x0a\x69\x14\xc9\x3b\x17\xf7\x17\x41\x50\x31\x90\x18\x48\xf6\xc4\x0c\xb3\x48\x83\x10\x73\xc9\xa5\xce\x60\xc5\x49\xfe\xf9\xec\x49\x58\xc2\x1f\x03\x7c\xc5\xc4\x55\x1b\xd3\x6c\x32\xe9\xbd\xe9\xce\x94\xd3\x00\x1d\xba\x9e\xdc\x62\x75\x4c\xd5\x95\x95\x2a\xa0\xab\x57\x32\xfb\x8a\x92\x5e\x45\x87\x4d\xb8\x23\xf3\x18\xbf\x69\x29\x16\x52\x57\x84\x9f\x1c\xfa\xa1\x22\xea\x2a\x97\xc2\x12\x26\x50\xc7\x7e\x7d\x36\xf1\x1a\x39\xb1\xec\x09\xbf\x96\xbc\x6f\xe4\xb9\x37\x66\x18\xc5\x15\xd1\x81\x81\x16\x7e\x17\x52\x18\xd4\xd4\x34\xa4\x4a\x3e\xa1\x5e\x73\xb9\xc9\x80\xd4\x56\x9e\xd1\xce\x19\x45\xdd\x47\x13\x98\x59\x49\xed\xb6\x0e\x09\x0b\x6d\xb5\x5b\x6d\xfe\x75\xb1\x22\xe3\x49\x0c\xed\xff\xe4\xf6\xf2\x04\xe9\x1b\x25\x03\x23\x39\xa3\x27\x71\x5f\x87\x5c\x70\x5c\xdb\x0c\x72\xc2\xf3\xf1\xed\xe4\x05\x5c\xc1\xf4\xf6\x45\xa0\xef\xcb\x15\x13\x14\x9f\x33\xb8\xbf\xbf\xbf\x7f\xf9\x5f\x35\xdb\x4a\x5a\x2b\x2b\x57\x72\x61\x08\x5d\xbb\x0d\x88\x01\x58\x91\xfc\x73\xa1\x65\x2d\xe8\x21\xbc\x4d\xc9\xce\xf6\xae\xab\xc9\x21\xd9\x6d\xb0\x9a\x50\x56\x9b\x63\x83\x67\x1b\xf4\x38\x11\x61\xb3\x74\x0e\x0e\x6c\x9c\x1b\x1d\xdf\xac\x1f\x22\x0a\x8e\x81\x5e\x8b\xcf\xf6\x8a\x70\x56\xb8\x02\x75\xd5\x78\xa2\xe7\x26\xec\xb6\x4e\x91\xd2\x78\xce\xbb\xaf\x16\x6c\x0c\x49\xc9\xff\x69\xc2\x82\x3a\xa1\xf6\x87\x35\x71\xff\x7a\x1d\xee\xef\x3c\x0d\xc6\xea\x9c\xb2\x27\x60\x74\x11\x0d\x7a\x2e\x3a\xcc\xdc\x70\xbb\x17\xa6\x94\x3d\x9d\x20\x8e\x2b\xbd\x83\x03\xcc\x39\x59\x21\x87\xb5\xd4\x07\x58\xb4\xfc\xc9\xd1\x96\xcd\x53\xbf\x15\x40\x99\x50\xb5\x0d\x14\x46\x60\xb7\x0a\x17\x91\x26\xa2\xc0\xc8\x8d\xb8\x45\x34\x8d\xa0\x22\xcf\x8b\x68\x3a\x9b\x44\x60\x2c\x2a\x2f\x7a\x22\xbc\xc6\x45\x34\x9b\x84\x96\x8d\x22\xc2\x6b\xf3\x69\x8a\x96\xf3\xd4\x49\xce\x44\x12\x7e\x76\x21\x35\x4c\xf7\x81\x97\xd3\xe5\x03\x92\x35\x47\x9b\xbc\x41\x69\x49\xf1\x5b\x29\xad\x9c\xa7\xe5\xb4\x87\xcc\x96\xef\x24\xc5\x0c\x5e\xf9\x4b\xae\xf5\x20\xe7\xc4\x98\x45\xe4\xa7\x61\xb4\x1c\x9b\x0d\xb3\x79\x09\x56\xc2\x9c\x40\xa9\x71\xbd\x88\x72\x2d\x8d\x29\x09\xd3\x49\x69\x2b\x1e\x2d\x5f\x1d\xd6\xf3\x94\x2c\x2f\x5b\xb7\xe7\x69\x39\xeb\x2c\xa9\x3e\xcc\xd6\x29\x50\xbc\x2e\x98\x70\x44\x83\x72\x9e\x41\xe1\xbd\x2c\x98\x28\x12\x78\x8f\xd8\x9b\x2b\xad\x55\x26\x4b\xd3\x82\xd9\xb2\x5e\x25\xb9\xac\x52\xb1\x55\xfc\xca\xdf\x52\x96\x55\x98\x9e\x09\x34\x5a\xbe\x61\xf6\xd7\x7a\xe5\x5c\xf2\x46\x28\x5a\xc2\xb8\x49\x3a\x3a\x55\xc8\xc3\x63\x6d\x55\x6d\xb3\xa1\xd3\x1a\x97\x73\x43\x2a\xe5\x09\x96\x1e\x11\x14\x96\xdb\x59\xce\x53\x87\x3a\xc9\x8a\xc9\x35\x53\xf6\x80\x7d\x22\x1a\xdc\xbd\xb0\x80\x87\xa4\x22\x6a\x3c\xaa\x88\x1a\xc5\xe1\xe5\x89\xc2\xa2\xce\xe0\xe3\xed\x2c\xb9\xb9\xbe\xbe\xbb\x8f\xe1\x2e\xf9\xf1\xfa\xe6\x66\xf6\x29\xee\xc7\x9d\x74\x93\x6b\xfa\xe7\x38\xbc\x43\xff\xe1\x85\x77\x81\x8c\x3c\x37\xb2\xe9\x8f\x87\x4e\xba\xbc\x08\xfc\x58\x11\x83\x0f\x64\x8b\xda\x7b\x63\x19\x6f\x56\xe3\x91\x63\x39\x4b\xd3\x9d\xd9\x27\x0e\x53\x11\x65\x92\x9c\x68\x2b\x73\x2a\x3c\xe7\xbe\x20\x7e\x27\x9c\xa7\xbb\x2f\xfb\x74\xf7\xbc\x4f\x77\xdb\x7d\xa2\x44\x31\x08\x85\x58\xab\xd9\xaa\x6e\x06\xf0\xe8\x0f\xb9\x54\xdb\x97\xc3\x54\x66\x69\xba\xd9\x6c\x12\xa9\x50\x18\xab\x11\x6d\x45\x54\x22\x75\x91\x3a\xac\x6e\xaa\xee\x51\xa1\x78\xef\x37\xdf\x11\xe5\x53\xe8\x7a\xd5\x2b\x96\xda\xc4\x70\x4e\xaf\x2b\x11\xef\xb0\xf7\x36\xf0\xc3\x44\xcb\x57\x3f\xfd\xed\xc3\xa3\xd3\x33\xea\x48\x49\x08\xa5\x1f\xe4\xb8\x22\x6a\xc0\x4f\xf3\xde\xfb\x4d\x32\x61\x61\x01\x1f\xdb\x34\xc4\x70\xc8\xcc\xa7\x00\x6b\x89\x2e\xd0\x0e\xb0\xd7\x1d\xf6\xc6\x61\x03\xb0\x72\x30\x03\x8b\x70\xfc\x6e\x15\x66\x30\xfa\x05\x89\xad\x35\x8e\xfa\x24\x2a\x2d\x15\x6a\xcb\xd0\x64\x01\x1c\xc0\x0f\x06\x77\x99\x74\xb2\x7d\x7f\xa8\x40\x59\xa1\xd5\xdb\xe1\x91\xd6\xc6\x9b\x76\xf3\x95\xe4\x1c\x73\xc7\x4a\x60\xae\x3b\xeb\x0d\x7e\x0c\xe4\x30\xd0\x15\xe8\xf3\x41\x0f\x54\xf8\x3a\x96\x52\x53\x26\x88\x75\x7a\x02\x26\x07\xb0\x7d\xfc\x7f\x32\x10\xd0\x3f\x34\x10\xac\x3e\x5d\x1c\x4b\xf7\x61\x52\x8a\x7e\x60\xb4\x33\xd0\x75\x45\x20\x4d\x9a\x28\xc6\x4d\xf6\xe2\xe1\x03\xb6\xb9\x17\x60\x3a\x39\x5b\x54\x07\x60\x22\xc5\x78\x94\x97\xee\x4e\x18\xc5\xb0\xae\x85\xa7\x1f\xc6\xf8\x84\xc2\x5e\x0e\xe2\xaf\x15\x25\x16\xdf\x37\xa3\x7c\xdc\xab\xd8\x1f\x69\xf3\x17\xcf\xff\xa0\x2c\x60\xa0\x19\x6b\xaf\x39\x56\xe8\xab\x98\xca\xbc\x76\x9f\x49\x81\x07\xe9\xcf\xdb\xb7\x74\x3c\x6a\x80\xa3\x83\x9e\xce\xf4\x91\x99\xc0\x05\xa7\x7e\xcd\x90\xd3\xc7\xf5\xdf\x19\x6e\x60\x71\x4a\xb7\xb3\xf2\x4b\x0f\x09\xbc\x1c\xf8\x95\x30\x21\x50\xff\xfa\xe1\xdd\x03\x2c\xe0\x2f\xef\x1f\xff\x9a\x18\xab\x99\x28\xd8\x7a\x3b\x0e\x2c\xc4\x20\x6a\xce\x63\x98\xf5\x6a\xdc\xb3\x23\x29\x59\x51\xfa\xe9\xf5\x33\x97\xf9\xe7\xf1\x40\xf5\xe5\xc5\xc0\xdf\xe6\x85\xb4\x08\xfd\x4e\xfa\x6e\x4c\xfc\x76\x77\xa0\xb9\xf5\x13\x7f\x99\xc3\x02\x86\x9b\x7e\xf5\x01\x9f\x87\xce\xbf\x23\xb6\x4c\xfc\xbb\x67\xec\x01\x97\xf0\x27\x18\xfd\xfb\x5f\xa3\x73\xc5\xd9\x3e\x03\xbf\x91\x93\x06\xd1\xe5\xa4\x0b\xc0\x99\xfd\xd6\x39\x0f\x1a\x75\xa1\x1f\xe5\xd2\x97\xf5\x49\x26\x0f\xcc\x28\xa2\x0d\xbe\x15\x76\x1c\x46\x7f\x19\x4e\xa1\xa3\x14\x1b\xb4\x8d\xc6\x26\xe0\xef\x10\xd4\x98\x19\x90\xf2\xb5\x52\xee\xc8\x6a\x3d\x21\x94\xbe\x76\x6d\xf0\xc0\x8c\x45\xe1\xee\xb4\x43\x9f\x04\x71\x75\x41\xa7\x29\xbc\x15\xf0\xf6\xf5\x7c\x31\x9d\xc6\xd0\x3c\xe5\x7c\x17\x01\x95\x68\x40\x48\x0b\x1b\xa9\x3f\x7f\xcf\x44\xd7\xd8\xe7\x6c\x9c\xf7\x7b\xc0\xf2\xe1\x99\x1b\x3c\x18\x8e\x7f\x67\x58\x4b\x69\xbb\xdf\x19\x76\x3b\x40\x41\xdd\xea\x3f\x01\x00\x00\xff\xff\xce\x7a\x76\x48\xa5\x10\x00\x00")

func templatesHtmlCameraHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCameraHtml,
		"templates/html/camera.html",
	)
}

func templatesHtmlCameraHtml() (*asset, error) {
	bytes, err := templatesHtmlCameraHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/camera.html", size: 4261, mode: os.FileMode(420), modTime: time.Unix(1586192992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlCrosshairHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\x71\x6f\xdb\xb6\x13\xfd\xbf\x9f\xe2\xe0\xe2\xf7\xb3\x33\xc8\x54\xec\xa6\x59\xa7\xca\x02\xd6\x60\x68\x37\x24\x4b\xb1\xe4\xaf\x0d\x43\x41\x8b\x27\x89\x0b\x45\x12\x24\x65\xc7\x31\xfc\xdd\x07\xca\x96\x44\x3b\xee\x10\x20\x10\x8f\x8f\xef\x1e\xdf\xdd\xc9\xda\x6e\x81\x61\xc1\x25\xc2\x28\x37\xca\xda\x8a\x72\x33\x82\xdd\xee\xcd\x76\x0b\x5c\xe6\xa2\x61\x08\x23\x2e\xf3\x6f\x15\x52\xd6\x6e\x00\x00\xa4\xd6\x6d\x04\x66\xed\x33\xc0\x52\xb1\x0d\x6c\x0f\x0b\x00\xad\x2c\x77\x5c\xc9\x04\xe8\xd2\x2a\xd1\x38\xfc\x38\xec\x51\xc6\xb8\x2c\x13\xb8\x1c\x62\x35\x35\x25\x97\x47\xa1\x35\x67\xae\x4a\x60\x76\x79\xf9\xbf\x21\x58\x21\x2f\x2b\xd7\x45\xfb\x30\xe3\x56\x0b\xba\x49\xa0\x10\xf8\x3c\xa0\x0b\x25\xdd\xd4\xf2\x17\x4c\x60\x76\xad\x4f\x37\x0a\x5a\x73\xb1\x49\xa0\x56\x52\x59\x4d\xf3\x5e\xe2\xee\x4d\x70\xa9\x08\x68\x04\x34\x59\x71\xcb\x1d\xb2\xe0\x8a\xb9\x12\xca\x24\xb0\x14\x34\x7f\x3a\x7b\x12\x32\xf8\x21\xc0\xd7\x5c\x4e\x0f\x77\x9a\x5f\x5e\x0e\x6a\xfa\x33\xd5\x2c\x40\x87\xd2\xc9\x7b\xac\x4f\xad\x9a\x3a\xa5\x03\xbb\x06\x92\xf9\x77\x48\x06\x8a\x1e\x4b\x84\x37\xf3\x14\xbf\x3e\x58\x2c\x95\xa9\xa9\x78\x75\xe8\x6d\x4d\xf5\x34\x57\xd2\x51\x2e\xd1\x44\xed\xfa\x6c\xe1\x0d\x0a\xea\xf8\x0a\xbf\x57\xbc\xff\xa8\xf3\x90\xcc\x72\x86\x4b\x6a\x82\x04\x07\xf8\x75\x68\x61\xd0\x53\xb3\xd0\x2a\xb5\x42\x53\x08\xb5\x4e\x80\x36\x4e\xbd\x62\xd7\x06\xc3\xfa\x9c\xb6\xe0\x2b\x15\x11\x90\x4a\xfc\x63\x83\x33\x4b\x9a\x3f\x95\x46\x35\x92\x4d\x0f\xed\xf0\xb6\xa0\xfe\x6f\xe0\xf0\xff\xd3\x38\x98\x95\x94\xf1\x15\x70\xb6\x18\x1d\x19\x39\xea\x06\x29\xdc\x1e\x82\x31\xe3\xab\xc3\xf1\xe0\xb1\x83\x1e\xf4\x0d\xf0\x6a\x96\xdd\x22\x2d\x04\x3a\xf2\x19\x95\xa3\xe5\xd7\x4a\x39\x95\xc6\xd5\x6c\x80\xcc\xb3\x3b\xc5\x30\x81\x9b\x6e\xe4\x21\xb5\x9a\x4a\xc8\x05\xb5\x76\x31\x6a\x7b\x63\x94\x4d\xec\x9a\xbb\xbc\x02\xa7\x20\xa5\x50\x19\x2c\x16\xa3\x9c\xd6\x68\x28\xa9\x5c\x2d\x46\xd9\x4d\xbb\x48\x63\x9a\x5d\xa4\xb1\x27\xc8\xd2\xb8\x9a\xf7\x69\x74\xd6\x9b\x75\x50\x04\x5a\x34\x25\x97\x50\x28\x03\xda\xcb\x82\xb2\x95\x58\x72\x59\x12\x78\x40\x1c\x12\x55\xce\x69\x9b\xc4\x71\xc9\x5d\xd5\x2c\x49\xae\xea\x58\x6e\xb4\x98\xb6\xd3\xea\x78\x8d\xf1\x99\x5b\x8e\xb2\xcf\xdc\x7d\x69\x96\x5e\x52\x9b\x84\xa1\xa3\x5c\x58\xd2\x7b\xa9\x43\x13\xee\x1b\xa7\x1b\x97\x1c\x8b\x36\x98\xa5\x96\xd6\xba\x75\x57\xb5\x88\xa0\x16\x7e\x27\x4b\x63\x8f\x7a\x55\x12\x9b\x1b\xae\x5d\x87\x5d\x51\x03\x7e\x3e\x16\x70\x4b\x6a\xaa\x27\xe3\x9a\xea\x71\x14\xbe\x44\x50\x3a\x34\x09\xfc\xf5\x7e\x4e\xae\xde\xbd\xbb\xfe\x29\x82\x6b\xf2\xe1\xdd\xd5\xd5\xfc\xef\xa8\x07\xbd\x28\x55\x27\x30\xfb\x31\x0a\xdf\x25\x7f\xb6\xc1\xeb\x20\x46\x9f\xf7\xb1\xd9\x87\xae\xf9\x2e\xde\x04\x3a\x96\xd4\xe2\x2d\xdd\xa0\x69\xd5\x38\x2e\xf6\xab\xc9\xd8\xbb\x9c\xc4\xf1\xd6\xee\x88\xc7\xd4\x54\x5b\x92\x53\xe3\x54\xce\x64\xeb\x79\xdb\x0a\xdf\xa8\x10\xf1\xf6\x65\x17\x6f\x9f\x77\xf1\x76\xb3\x23\x5a\x96\x47\x57\xa1\xce\x19\xbe\x6c\xf6\xc3\x3f\xfe\x7f\xae\xf4\xe6\xe3\x71\x29\x93\x38\x5e\xaf\xd7\x44\x69\x94\xd6\x19\x44\x57\x53\x4d\x94\x29\x63\x8f\x35\xfb\x7e\xbb\xd7\x28\x1f\xda\xcd\x3b\xaa\xdb\x12\xfa\x11\x69\x89\x95\xb1\x11\x9c\xe3\xf5\x2d\xd2\x0a\x6e\xd5\x06\x3a\xec\x28\xbb\xf9\xf9\x8f\xc7\x7b\xcf\x33\xee\x4d\x21\x94\xb1\x47\x35\xa9\xa9\x3e\xf2\xa7\x1c\x5a\x68\x18\x09\x6f\x55\xb0\x41\xfa\xdf\xc7\xc9\x11\x4d\xe7\x01\x51\x72\x32\xe6\x52\x37\x6e\x1c\x41\xd1\xc8\xdc\xab\x80\x09\xae\x50\xba\x8b\xc0\x2b\x80\x46\x33\xea\xf0\x61\x3f\xb8\x93\x81\xe1\xb8\x66\xfb\xd6\xfb\x45\x60\x8d\xd2\xc1\x02\x98\xca\x1b\xff\x48\x4a\xec\xa2\x9f\x36\xbf\xb2\xc9\x78\x0f\x1c\x77\x3c\x7d\xea\x93\x34\x81\x04\x4f\xaf\x15\x6f\x69\xcf\x5d\xdd\xa7\xe8\x17\x5f\x3d\x30\x50\x79\xa4\x8b\x70\x29\xd1\x7c\x79\xbc\xbb\x85\x05\xfc\xf6\x70\xff\x3b\xb1\xce\x70\x59\xf2\x62\x33\x69\x33\x44\x20\x1b\x21\x22\x98\x0f\x04\xfe\x3d\x4a\x2a\x5e\x56\x6d\x6f\x7d\x12\x2a\x7f\x9a\x1c\x91\x5e\x9c\xbe\x84\xcf\x19\x96\xc6\xdd\xb8\x9d\x7e\xa9\x14\x4a\xb9\xee\x13\x06\x25\xf3\x4f\xff\x06\x00\x00\xff\xff\x95\x1d\x17\xe0\xe6\x08\x00\x00")

func templatesHtmlCrosshairHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCrosshairHtml,
		"templates/html/crosshair.html",
	)
}

func templatesHtmlCrosshairHtml() (*asset, error) {
	bytes, err := templatesHtmlCrosshairHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/crosshair.html", size: 2278, mode: os.FileMode(420), modTime: time.Unix(1586192971, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586192825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xbd\x6e\xe3\x30\x10\x84\x7b\x3d\xc5\x9a\xf5\x89\xbc\xeb\x7c\x80\xa8\xf6\x9a\x2b\xf2\x06\xc1\x9a\x5c\x89\xab\x50\xa4\x21\xae\xed\x18\x82\xdf\x3d\x90\x65\x23\x09\xe2\x22\x48\xc5\x9f\x9d\xf9\x38\x04\x66\x9e\xc1\x53\xc7\x89\x40\x71\x72\xcf\x81\xd0\x2b\xb8\x5c\xaa\x66\xe3\xb3\x93\xf3\x9e\x20\xc8\x18\xdb\xaa\x59\x16\x88\x98\x7a\xab\x28\xa9\xb6\x02\x68\x16\xf1\xb2\x01\x68\x46\x12\x04\x17\x70\x2a\x24\x56\x1d\xa4\xab\xb7\xea\x36\x12\x96\x48\xed\x7f\xc2\x2e\x92\xe8\x7f\x94\x05\xfb\xa7\x90\x25\x37\x66\x1d\x7d\x20\x24\x1c\xc9\xaa\x23\xd3\x69\x9f\x27\x51\xe0\x72\x12\x4a\x62\xd5\x89\xbd\x04\xeb\xe9\xc8\x8e\xea\xeb\xe1\x17\x70\x62\x61\x8c\x75\x71\x18\xc9\xfe\xb9\xbf\x17\x39\xbd\xc0\x44\xd1\xaa\x22\xe7\x48\x25\x10\x89\x82\x30\x51\x67\x95\x19\xf0\x88\xc5\x4d\xbc\x17\xe3\xb9\x88\x79\x10\x4b\xbb\x52\x14\x98\x1b\x6d\x15\x43\x99\xdc\x67\xf7\x23\xe3\x50\x54\xdb\x98\x55\x70\xb3\x6f\xea\xfa\x1b\xa9\x8c\xf3\x69\x28\xda\xc5\x7c\xf0\x5d\xc4\x89\xb4\xcb\xa3\xc1\x01\x5f\x4d\xe4\x5d\x31\x81\xfb\x10\xb9\x0f\xa2\x87\x62\xfe\xea\xad\xfe\x6d\x56\x8a\xf1\xd4\xe1\x21\x8a\x1e\x39\x5d\x73\x3f\x4a\xfd\x03\xfa\xfb\xd5\x02\xfe\xfa\xaf\xba\xbe\x16\xc0\xdc\x1b\xd0\xec\xb2\x3f\xb7\xd5\x3c\x03\x25\xbf\xd4\xe7\x2d\x00\x00\xff\xff\xee\x89\xf4\x51\x57\x02\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 599, mode: os.FileMode(420), modTime: time.Unix(1586193064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/camera.html": templatesHtmlCameraHtml,
	"templates/html/crosshair.html": templatesHtmlCrosshairHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"camera.html": &bintree{templatesHtmlCameraHtml, map[string]*bintree{}},
			"crosshair.html": &bintree{templatesHtmlCrosshairHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

