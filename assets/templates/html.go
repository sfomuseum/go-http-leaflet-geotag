// Code generated by go-bindata.
// sources:
// templates/html/camera.html
// templates/html/crosshair.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlCameraHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xed\x6e\xdb\xbc\x15\xfe\x9f\xab\x38\xd0\x8b\xce\xce\xa6\x48\xb6\xf3\xb1\x46\xb5\x0d\xb4\x41\xdb\x65\x48\x96\x62\x0d\xf6\x63\x45\x51\xd0\xd2\xb1\xc4\x85\x22\x09\x92\xb6\xe3\x1a\xbe\xa7\x5d\xc3\xae\x6c\x20\x25\x4b\x94\xed\xa4\x03\xf6\xa2\x45\x20\x1e\x3e\x3c\x1f\xcf\xf9\x20\xbd\xd9\x40\x86\x73\xca\x11\x82\x94\x94\xa8\x48\x00\xdb\xed\xc9\x66\x03\x06\x4b\xc9\x88\x41\x08\x28\x4f\x7f\x14\x48\xb2\x00\x22\xbb\x07\x00\x30\xd6\x66\xcd\x70\xea\xbe\x01\x66\x22\x5b\xc3\xa6\x5e\x00\x48\xa1\xa9\xa1\x82\x27\x40\x66\x5a\xb0\x85\xc1\x77\xed\x1e\xc9\x32\xca\xf3\x04\x06\xad\xac\x24\x2a\xa7\xbc\x23\x5a\xd1\xcc\x14\x09\x0c\x07\x83\x37\xad\xb0\x40\x9a\x17\x66\x27\x6d\xc4\x19\xd5\x92\x91\x75\x02\x73\x86\xcf\x2d\x7a\x2e\xb8\x39\xd3\xf4\x27\x26\x30\xbc\x92\xfb\x1b\x73\x52\x52\xb6\x4e\xa0\x14\x5c\x68\x49\xd2\xc6\xc5\xed\x89\x17\x54\x08\x24\x04\x92\x2c\xa9\xa6\x06\x33\x2f\xc4\x54\x30\xa1\x12\x98\x31\x92\x3e\x1d\x3d\x09\x53\xf8\xa3\x87\x2f\x29\x3f\xab\x63\x1a\x0d\x06\xad\x37\xcd\x99\x62\xe8\xa1\x7d\xd7\xa3\x4b\x2c\xf7\xa9\x3a\x33\x42\x7a\x74\xb5\x4a\x46\x2f\x28\x69\x55\x34\xd8\x88\x59\x32\xf7\xf1\xab\x9a\x62\x2e\x54\x49\xd8\xc1\xa1\xdf\x4a\x22\xcf\x52\xc1\x0d\xa1\x1c\x55\xe8\xd6\x47\x13\xaf\x90\x11\x43\x97\xf8\x52\xf2\x5e\xc9\x73\x6b\x4c\xd3\x0c\x67\x44\x79\x06\x6a\xf8\x95\x4f\xa1\x57\x53\x43\x9f\x2a\xb1\x44\x35\x67\x62\x95\x00\x59\x18\x71\x44\x3b\xa3\x19\xaa\x36\x1a\xcf\xcc\x4c\x28\xbb\xb5\x4b\x98\x6f\xab\xde\xaa\xf3\xaf\xf2\x19\xe9\x0f\x42\xa8\xff\x47\x97\xa7\x07\x48\xd7\x28\x09\x68\xc1\x68\x76\x10\xf7\xb9\xcf\x05\xc3\xb9\x49\x20\x25\x2c\xed\x5f\x0e\xde\xc0\x19\x0c\x2f\xdf\x78\xfa\x7e\x9e\x51\x9e\xe1\x73\x02\xd7\xd7\xd7\xd7\xef\xfe\xa7\x66\x9b\x09\x63\x44\x69\x4b\xce\x0f\xa1\x69\xb7\x0e\x31\x00\x33\x92\x3e\xe5\x4a\x2c\x78\xb6\x0b\x6f\x55\xd0\xa3\xbd\x6b\x6b\xb2\x4b\x76\x1d\xac\x22\x19\x5d\xe8\x7d\x83\x47\x1b\x74\x3f\x11\x7e\xb3\x34\x0e\x76\x6c\x1c\x1b\x1d\xaf\xd6\x0f\xe1\x39\x43\x4f\xaf\xc1\x67\x73\x46\x18\xcd\x6d\x81\xda\x6a\x3c\xd0\x73\xe1\x77\x5b\xa3\x48\x2a\x3c\xe6\xdd\x8b\x05\x1b\x42\x54\xb0\x7f\x69\xbf\xa0\x0e\xa8\xfd\x6d\x4e\xec\xbf\x56\x87\xfd\x3b\x8e\xbd\xb1\x3a\xce\xe8\x12\x68\x36\x09\x3a\x3d\x17\xec\x66\xae\xbf\xdd\x0a\xe3\x8c\x2e\x0f\x10\xfb\x95\xde\xc0\x01\xc6\x8c\xcc\x90\xc1\x5c\xa8\x1d\x2c\x98\xbe\xb7\xb4\x25\xe3\xd8\x6d\x79\x50\xca\xe5\xc2\x78\x0a\x03\x30\x6b\x89\x93\x40\x11\x9e\x63\x60\x47\xdc\x24\x18\x06\x50\x92\xe7\x49\x30\x1c\x0d\x02\xd0\x06\xa5\x13\x2d\x09\x5b\xe0\x24\x18\x0d\x7c\xcb\x5a\x12\xee\xb4\xb9\x34\x05\xd3\x71\x6c\x25\x47\x22\xf1\x3f\x9b\x90\x2a\xa6\xdb\xc0\x8b\xe1\xf4\x0e\xc9\x9c\xa1\x89\x3e\xa3\x30\x24\xff\x52\x08\x23\xc6\x71\x31\x6c\x21\xa3\xe9\xbd\xc8\x30\x81\x1b\x77\xcf\xd5\x1e\xa4\x8c\x68\x3d\x09\xdc\x34\x0c\xa6\x7d\xbd\xa2\x26\x2d\xc0\x08\x18\x13\x28\x14\xce\x27\x41\x9c\x2a\xa1\x75\x41\xa8\x8a\x83\xe9\xcd\xee\x7b\x1c\x93\xe9\x69\xed\xf3\x38\x2e\x46\xbe\x99\x87\x85\x91\x0b\x93\x74\xc4\x52\xe1\x74\xac\x49\x29\x9d\xff\xc2\x21\xbc\xbc\xd9\x9d\xe9\x38\xb6\xa8\x83\xa0\x75\xaa\xa8\x34\x3b\xec\x92\x28\xb0\x63\x77\x02\x77\x51\x49\x64\xbf\x57\x12\xd9\x0b\xfd\xbb\x09\xb9\x41\x95\xc0\xb7\xcb\x51\x74\x71\x7e\x7e\x75\x1d\xc2\x55\xf4\xf6\xfc\xe2\x62\xf4\x3d\x6c\xa7\x89\xb0\x83\x61\xf8\xe7\xd0\xbf\xa2\xfe\xe9\x84\x57\x9e\x8c\x3c\x57\xb2\xe1\xdb\x5d\xa1\x9e\x9e\x78\x7e\xcc\x88\xc6\x3b\xb2\x46\xe5\xbc\x31\x94\x55\xab\x7e\xaf\x30\x46\x26\x71\xbc\xd1\xdb\xc8\x62\x4a\x22\x75\x94\x12\x65\x44\x9a\xf1\x28\x15\x65\xec\xf8\xfe\x41\x18\x8b\x37\x3f\xb7\xf1\xe6\x79\x1b\x6f\xd6\xdb\x48\xf2\xbc\x13\x0a\x31\x46\xd1\xd9\xa2\x9a\x6f\xbd\x3f\xa4\x42\xae\xdf\xb5\x89\xa9\x8d\xac\x56\xab\x48\x48\xe4\xda\x28\x44\x53\x12\x19\x09\x95\xc7\x16\xab\xaa\xa4\x3e\x48\xe4\x5f\xdd\xe6\x3d\x91\x36\x6f\x60\x5b\xc1\x29\x16\x4a\x87\x70\x4c\xaf\x4e\xe2\xd8\x39\xec\xbc\xf5\xfc\xd0\xc1\xf4\xe6\xfd\xdf\x1f\x1f\xac\x9e\x5e\x43\x4a\x44\xb2\xec\x51\xf4\x4b\x22\x3b\xfc\x54\x2f\xaa\x2f\x82\x72\x03\x13\xf8\x56\xa7\x21\x84\x5d\x66\xbe\x7b\x58\x43\x54\x8e\xa6\x83\x3d\x6f\xb0\x17\x16\xeb\x81\xa5\x85\x69\x98\xf8\xd3\x6d\x2d\x31\x81\xde\x27\x24\x66\xa1\xb0\xd7\x26\x51\x2a\x21\x51\x19\x8a\x3a\xf1\xe0\x00\xae\xef\xec\xac\x6e\x64\xdb\xf6\x50\x8e\xa2\x44\xa3\xd6\xdd\x23\xb5\x8d\xcf\xf5\xe6\x8d\x60\x0c\x53\xcb\x8a\x67\xae\x39\xeb\x0c\x7e\xf3\xe4\xd0\xd1\xe5\xe9\x73\x41\x77\x54\xb8\x3a\x16\x42\x65\x94\x13\x63\xf5\x78\x4c\x76\x60\xdb\xf0\x77\x32\xe0\xd1\xdf\x35\xe0\xad\xbe\x9f\xec\x4b\xb7\x7e\x52\xf2\x76\xf0\xd4\x23\xc6\x76\x85\x27\x8d\xaa\x28\xfa\x55\xf6\xc2\xee\xfb\xb0\x1a\xbb\x30\x1c\x1c\x2d\xaa\x1d\x30\x12\xbc\xdf\x4b\x0b\x3b\x72\x7b\x21\xcc\x17\xdc\xd1\x0f\x7d\x5c\x22\x37\xa7\x9d\xf8\x17\x32\x23\x06\xbf\x56\x93\xb2\xdf\xaa\xd8\xee\x69\x73\x73\xfd\xff\x50\xe6\x31\x50\x8d\xb5\x8f\x0c\x4b\x74\x55\x9c\x89\x74\x61\x3f\xa3\x1c\x77\xd2\x0f\xeb\xdb\xac\xdf\xab\x80\xbd\x9d\x9e\xc6\xf4\x9e\x19\xcf\x05\xab\x7e\x4e\x91\x65\x0f\xf3\x7f\x50\x5c\xc1\xe4\x90\x6e\x6b\xe5\x53\x0b\xf1\xbc\xec\xf8\x15\x51\xce\x51\xfd\xe5\xf1\xfe\x0e\x26\xf0\xd7\xaf\x0f\x7f\x8b\xb4\x51\x94\xe7\x74\xbe\xee\x7b\x16\x42\xe0\x0b\xc6\x42\x18\xb5\x6a\xec\xad\x1e\x15\x34\x2f\xdc\xf4\xfa\xc0\x44\xfa\xd4\xef\xa8\x3e\x3d\xe9\xf8\x5b\x3d\x40\x26\xbe\xdf\x51\xdb\x8d\x91\xdb\x6e\x0e\x54\x97\x6a\xe4\xee\x4a\x98\x40\x77\xd3\xad\x1e\xf1\xb9\xeb\xfc\x3d\x31\x45\xe4\x9e\x15\x7d\x07\x38\x85\x3f\x41\xef\x3f\xff\xee\x1d\x2b\xce\xfa\x95\xf5\x4a\x4e\x2a\x44\x93\x93\x26\x00\x6b\xf6\xb5\x73\x0e\xd4\x6b\x42\xdf\xcb\xa5\x2b\xeb\x83\x4c\xee\x98\x91\x44\x69\xbc\xe5\xa6\xef\x47\x7f\xea\x4f\xa1\xbd\x14\x6b\x34\x95\xc6\x2a\xe0\x5f\x10\x54\x99\xe9\x90\xf2\x52\x29\x37\x64\xd5\x9e\x90\x2c\xfb\x68\xdb\xe0\x8e\x6a\x83\xdc\xde\x69\xbb\x3e\xf1\xe2\x6a\x82\x8e\x63\xb8\xe5\x70\xfb\x71\x3c\x19\x0e\x43\xa8\x5e\x4a\xae\x8b\x20\x13\xa8\x81\x0b\x03\x2b\xa1\x9e\x7e\x65\xa2\x69\xec\x63\x36\x8e\xfb\xdd\x61\x79\xf7\x8a\xf4\x1e\x0c\x07\xbf\xe4\xe7\x42\x18\xef\x97\xfc\x66\x03\xc8\x33\xbb\xfa\x6f\x00\x00\x00\xff\xff\x86\xab\xd3\x0a\x0a\x10\x00\x00")

func templatesHtmlCameraHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCameraHtml,
		"templates/html/camera.html",
	)
}

func templatesHtmlCameraHtml() (*asset, error) {
	bytes, err := templatesHtmlCameraHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/camera.html", size: 4106, mode: os.FileMode(420), modTime: time.Unix(1586194697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlCrosshairHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\x6d\x6f\xe3\x36\x13\xfc\x7e\xbf\x62\xa1\xc3\xf3\x58\x29\x14\x2a\x76\x72\xe9\x55\x27\x0b\xe8\x05\x45\x5f\x90\x34\x87\x26\x9f\x5a\x14\x87\xb5\x48\x49\x6c\x28\x92\x20\x29\x3b\x8e\xe0\xff\x5e\x50\x7e\x11\xed\xe4\x8a\x00\x01\xb9\x1c\xce\x0e\x67\x77\x6d\xf7\x3d\x50\x56\x71\xc9\x20\x2a\x8d\xb2\xb6\x41\x6e\x22\xd8\x6c\xde\xf5\x3d\x38\xd6\x6a\x81\x8e\x41\xc4\x65\xf9\xb5\x61\x48\x23\x20\xfe\x0c\x00\x20\xb7\x6e\x2d\x58\x31\xac\x01\x16\x8a\xae\xa1\xdf\x6d\x00\xb4\xb2\xdc\x71\x25\x33\xc0\x85\x55\xa2\x73\xec\xd3\x78\x86\x94\x72\x59\x67\x70\x31\xc6\x5a\x34\x35\x97\x47\xa1\x15\xa7\xae\xc9\x60\x7a\x71\xf1\xbf\x31\xd8\x30\x5e\x37\x6e\x1f\x3d\x84\x29\xb7\x5a\xe0\x3a\x83\x4a\xb0\xe7\x11\x5d\x29\xe9\xce\x2d\x7f\x61\x19\x4c\xaf\xf5\xe9\x41\x85\x2d\x17\xeb\x0c\x5a\x25\x95\xd5\x58\x1e\x24\x6e\xde\x05\x8f\x4a\x00\x13\xc0\x6c\xc9\x2d\x77\x8c\x06\x4f\x2c\x95\x50\x26\x83\x85\xc0\xf2\xe9\xcd\x9b\x50\xc0\x77\x01\xbe\xe5\xf2\x7c\xf7\xa6\xd9\xc5\xc5\xa8\xe6\x70\xa7\x99\x06\xe8\x50\x3a\xf9\xc0\xda\x53\xab\xce\x9d\xd2\x81\x5d\x23\xc9\xec\x1b\x24\x23\xc5\x01\x4b\x84\x37\xf3\x14\xbf\xda\x59\x2c\x95\x69\x51\xbc\xba\xf4\xbe\x45\x7d\x5e\x2a\xe9\x90\x4b\x66\x92\x61\xff\x66\xe1\x0d\x13\xe8\xf8\x92\x7d\xab\x78\xff\x51\xe7\x31\x99\xe5\x94\x2d\xd0\x04\x09\x76\xf0\xeb\xd0\xc2\xa0\xa7\xa6\xa1\x55\x6a\xc9\x4c\x25\xd4\x2a\x03\xec\x9c\x7a\xc5\xae\x0d\x0b\xeb\x73\xda\x82\xaf\x54\x24\x40\x1a\xf1\x8f\x0d\xee\x2c\xb0\x7c\xaa\x8d\xea\x24\x3d\xdf\xb5\xc3\xfb\x0a\xfd\xdf\xc8\xe1\xff\xe7\x69\x30\x2b\x39\xe5\x4b\xe0\x74\x1e\x1d\x19\x19\xed\x07\x29\x3c\x1e\x83\x29\xe5\xcb\xdd\xf5\x60\xb9\x87\xee\xf4\x8d\xf0\x66\x5a\xdc\x32\xac\x04\x73\xe4\x67\xa6\x1c\xd6\x5f\x1a\xe5\x54\x9e\x36\xd3\x11\x32\x2b\xee\x14\x65\x19\xdc\xec\xa7\x1e\x72\xab\x51\x42\x29\xd0\xda\x79\x34\xf4\x46\x54\xc4\x76\xc5\x5d\xd9\x80\x53\x90\x23\x34\x86\x55\xf3\x28\x2d\xb1\x65\x06\xd3\xa8\xb8\x19\x16\x79\x8a\xc5\x59\x9e\xfa\xdb\x45\x9e\x36\xb3\x30\xc7\x7d\xe7\x74\xe7\xb2\xa3\xb0\x36\xac\xc8\x2d\xb6\x7a\x10\xaf\x06\x44\xf0\x54\x7f\x52\xe4\xa9\x47\xbd\x7a\xb1\x2d\x0d\xd7\x6e\x8f\x5d\xa2\x01\xdf\x7e\x73\xb8\x25\x2d\xea\x78\xd2\xa2\x9e\x24\xe1\x8c\x32\xe9\x98\xc9\xe0\xaf\x0f\x33\x72\x75\x79\x79\xfd\x43\x02\xd7\xe4\xe3\xe5\xd5\xd5\xec\xef\xe4\x00\x7a\x51\xaa\xcd\x60\xfa\x7d\x12\x8e\xea\x9f\x43\xf0\x3a\x88\xe1\xf3\x36\x36\xfd\xb8\xaf\xed\xd9\xbb\x40\xc7\x02\x2d\xbb\xc5\x35\x33\x83\x1a\xc7\xc5\x76\x17\x4f\x1a\xe7\x74\x96\xa6\xbd\xdd\x10\x8f\x69\x51\x5b\x52\xa2\x71\xaa\xa4\x92\x94\xaa\x4d\x07\xa7\xbf\xa2\x10\x69\xff\xb2\x49\xfb\xe7\x4d\xda\xaf\x37\x44\xcb\xfa\xe8\x29\xe8\x9c\xe1\x8b\x6e\x3b\x5b\x93\xff\x97\x4a\xaf\x3f\x8d\x25\xd9\x25\x59\xad\x56\x44\x69\x26\xad\x33\x8c\xb9\x16\x35\x51\xa6\x4e\x3d\xd6\x6c\xcb\x79\xaf\x99\x7c\x18\x0e\xef\x50\xfb\xba\x81\xef\xc0\x81\x58\x19\x9b\xc0\x5b\xbc\x36\x4b\xd3\x41\xf0\xa0\x36\xd0\x61\xa3\xe2\xe6\xc7\x3f\x1e\xef\x3d\xcf\xe4\x60\x0a\x41\x4a\x1f\x55\xdc\xa2\x3e\xf2\xa7\x1e\xfb\x70\xec\x38\x6f\x55\x70\x40\x0e\xdf\x40\xf1\x11\xcd\xde\x03\xa2\x64\x3c\xe1\x52\x77\x6e\x92\x40\xd5\xc9\xd2\xab\x80\x98\x2d\x99\x74\x67\x81\x57\x00\x9d\xa6\xe8\xd8\xc3\x76\x2e\xe2\x91\xe1\xb8\x66\xdb\xd6\xfb\x49\xb0\x96\x49\x07\x73\xa0\xaa\xec\xfc\x92\xd4\x6c\x1f\xfd\xbc\xfe\x95\xc6\x93\x2d\x70\xb2\xe7\x39\xa4\x3e\x49\x13\x48\xf0\xf4\x5a\xf1\x81\xf6\xad\xa7\xfb\x14\x87\xcd\x17\x0f\x0c\x54\x1e\xe9\x22\x5c\x4a\x66\x7e\x79\xbc\xbb\x85\x39\xfc\xf6\x70\xff\x3b\xb1\xce\x70\x59\xf3\x6a\x1d\x0f\x19\x12\x90\x9d\x10\x09\xcc\x46\x02\xff\x31\x45\x1a\x5e\x37\x43\x6f\x7d\x16\xaa\x7c\x8a\x8f\x48\xcf\x4e\x3f\xe3\xde\x32\x2c\x4f\xf7\xe3\xf6\xea\xb7\x40\xa5\x94\xdb\xfd\x16\xe8\x7b\x60\x92\xfa\xd5\xbf\x01\x00\x00\xff\xff\x90\xb4\x01\xce\x4b\x08\x00\x00")

func templatesHtmlCrosshairHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlCrosshairHtml,
		"templates/html/crosshair.html",
	)
}

func templatesHtmlCrosshairHtml() (*asset, error) {
	bytes, err := templatesHtmlCrosshairHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/crosshair.html", size: 2123, mode: os.FileMode(420), modTime: time.Unix(1586194711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\xe4\xf0\x0a\x4b\x34\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1586192825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xb1\x6e\xf3\x30\x0c\x84\x77\x3f\x05\xa3\xf9\xb7\xf4\x77\x4b\x01\xcb\x6b\x97\x0e\x7d\x83\x42\x91\x68\x8b\x2e\x2d\x05\x12\x93\x34\x30\xf2\xee\x85\xe3\x06\xed\xdc\x49\x27\x1e\xf1\x1d\x70\x5c\x16\x08\x38\x50\x42\x50\x94\xfc\x7b\x44\x17\x14\xdc\x6e\x4d\xb7\x0b\xd9\xcb\xf5\x88\x10\x65\xe6\xbe\xe9\xd6\x07\xd8\xa5\xd1\x2a\x4c\xaa\x6f\x00\xba\x75\x79\x15\x00\xdd\x8c\xe2\xc0\x47\x57\x2a\x8a\x55\x27\x19\xda\xbd\xfa\xb6\x84\x84\xb1\x7f\x45\x37\x30\x8a\x7e\xc1\x2c\x6e\x7c\x8b\x59\x72\x67\x36\xeb\x17\x21\xb9\x19\xad\x3a\x13\x5e\x8e\xb9\x88\x02\x9f\x93\x60\x12\xab\x2e\x14\x24\xda\x80\x67\xf2\xd8\xde\x3f\xff\x80\x12\x09\x39\x6e\xab\x77\x8c\xf6\xe9\x91\xb7\x6b\xdb\x4d\x30\xa5\x0f\x28\xc8\x56\x55\xb9\x32\xd6\x88\x28\x0a\x62\xc1\xc1\x2a\x63\x7c\x48\x53\xd5\x9e\xf3\x29\x0c\xec\x0a\x6a\x9f\x67\xe3\x26\xf7\x69\x98\x0e\xd5\x44\x1a\x23\xd3\x18\x45\x4f\xd5\x3c\xeb\xbd\xfe\x6f\x36\x8a\x09\x38\xb8\x13\x8b\x9e\x29\x69\x5f\xeb\x23\xb6\xfa\x42\x47\x81\x5a\xfc\xdf\xe8\x3f\xa3\x15\x3c\x55\xd5\x77\x66\x63\x6e\x01\x6d\x7b\xef\xdc\x3c\x4a\xef\x0e\x39\x5c\xfb\x66\x59\x00\x53\x58\x2f\xf6\x15\x00\x00\xff\xff\xce\x39\xb0\x4e\xca\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 458, mode: os.FileMode(420), modTime: time.Unix(1586193498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x4b\x0a\xc3\x30\x0c\x44\xd7\xc9\x29\x06\x1f\xa0\xbe\x80\xea\x4d\x0f\x52\x44\xac\x10\x81\xf3\xc1\x71\x4b\x40\xe4\xee\xc5\x69\xbb\xf2\xee\x21\xcd\x30\xcf\x0c\x51\x46\x5d\x04\x4e\x97\x28\x87\xc3\x79\xf6\x66\x28\x32\x6f\x89\xcb\x75\x1e\x9e\x93\x70\x74\xb8\xd5\x1f\x45\x7d\x87\x1e\x00\xe8\x95\x42\xdf\x51\xd2\x40\x8c\x29\xcb\x78\x77\x7e\xe0\x59\x32\x7b\x17\x1e\x17\x40\x0e\x9e\xb7\x24\xe4\x39\x90\x4f\xda\xe6\xf3\xba\xef\x13\x6b\xae\x95\x3f\x37\xad\xee\xbb\xe7\xeb\x60\xe3\x36\xae\x6b\xf9\xb9\x99\x41\x96\x58\xe9\x13\x00\x00\xff\xff\x6a\x06\xb6\xc2\xd7\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 215, mode: os.FileMode(420), modTime: time.Unix(1586194844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/camera.html": templatesHtmlCameraHtml,
	"templates/html/crosshair.html": templatesHtmlCrosshairHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"camera.html": &bintree{templatesHtmlCameraHtml, map[string]*bintree{}},
			"crosshair.html": &bintree{templatesHtmlCrosshairHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

